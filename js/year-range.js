/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($) {
  Drupal.facets = Drupal.facets || {};
  Drupal.behaviors.facetsDateRange = {
    attach: function attach(context, settings) {
      function toTimestamp(strDate) {
        var datum = Date.parse(strDate);
        return datum / 1000;
      }

      function isEmpty(val){
        return (val === undefined || val == null || val.length <= 0) ? true : false;
      }

      function autoSubmit() {
        var $this = $(this);
        var facetId = $this.parents(".facets-widget-year_range").find("ul").attr("data-drupal-facet-id");
        var daterange = settings.facets.daterange[facetId];
        var min = toTimestamp($("input[id=".concat(facetId, "_min]")).val()) || "";
        var max = toTimestamp($("input[id=".concat(facetId, "_max]")).val()) || "";
        window.location.href = daterange.url.replace("__year_range_min__", min).replace("__year_range_max__", max);
      }

      function refineSubmit() {
        var facetId = $(".facets-widget-year_range").find("ul").attr("data-drupal-facet-id");
        var daterange = settings.facets.daterange[facetId];
        var min = $("input[id=".concat(facetId, "_min]")).val();
        var max = $("input[id=".concat(facetId, "_max]")).val();

        if (isEmpty(max)) {
            max = min;
        }

        var params = parseQueryString(window.location.search);
        var newParams = [];
        var existingDateQuery = false; // true if a date query already exists

        // update publication date in url if previously queried
        for (var key in params) {
          if (!params[key]) { // no search parameters in url
            break;
          }

          // check for publication_date query
          if (params[key].startsWith("publication_date")) { 
            existingDateQuery = true;
            newParams.push(key + "=" + encodeURIComponent("publication_date:(min:" + min + ",max:" + max + ")"));
          }
          else {
            newParams.push(key + "=" + params[key]);
          }
        }
        var newSearch = newParams.join("&");

        // if no existing date query in url
        if (!existingDateQuery) {
          var daterangestr = daterange.url.replace(window.location.pathname, "");
          if (newSearch !== "") {
              // current url has query params ==> append with & instead
              daterangestr = daterangestr.replace("?", "&");
          }
          daterangestr = daterangestr.replace("__year_range_min__", min).replace("__year_range_max__", max);
          newSearch += daterangestr;
        }

        // redirect happens
        window.location.search = newSearch; // update search parameters

        //window.location.href = daterange.url.replace("__year_range_min__", min).replace("__year_range_max__", max);
      }

      /*$("input.facet-year-range", context).on("change", autoSubmit);
      $("input.facet-year-range", context).on("keypress", function (e) {
        $(this).off("change blur");
        $(this).on("blur", autoSubmit);

        if (e.keyCode === 13) {
          autoSubmit();
        }
      });*/

        $('ul.item-list__year_range').addClass( "list-group list-group-horizontal" );

      $('.facet-yearpicker-submit').click(function () {
          refineSubmit();
      });

        // https://adevelopersnotes.wordpress.com/2013/04/11/parsing-a-query-string-into-an-array-with-javascript/
        var parseQueryString = function( queryString ) {
            var params = {}, queries, temp, i, l;

            // Split into key/value pairs
            queries = queryString.split("&");

            // Convert the array of strings into an object
            for ( i = 0, l = queries.length; i < l; i++ ) {
                temp = queries[i].split('=');
                params[temp[0]] = temp[1];
            }

            return params;
        };

      // Add validation to from and to textbox
      $.fn.inputFilter = function(callback, errMsg) {
        return this.on("input keydown keyup mousedown mouseup select contextmenu drop focusout", function(e) {
          if (callback(this.value)) {
            // Accepted value
            if (["focusout"].indexOf(e.type) >= 0
              && this.id === "publication_date_collection__max"
              && this.value < $("#publication_date_collection__min").val()
            ){
              $(this).addClass("input-error");
              this.setCustomValidity("The 'To' year must be bigger than 'From' year.");
              this.reportValidity();
              this.value = this.oldValue;
              try {
                this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
              }
              catch(err) {
                $('#publication_date_collection_-submit').prop('disabled', true);
                return;
              }
            }
            else {
              $('#publication_date_collection_-submit').prop('disabled', false);
            }

            if (["keydown","mousedown","focusout"].indexOf(e.type) >= 0){
              $(this).removeClass("input-error");
              this.setCustomValidity("");
            }
            this.oldValue = this.value;
            this.oldSelectionStart = this.selectionStart;
            this.oldSelectionEnd = this.selectionEnd;
          } else if (this.hasOwnProperty("oldValue")) {
            // Rejected value - restore the previous one
            console.log("Rejected value - restore the previous one");
            $(this).addClass("input-error");
            this.setCustomValidity(errMsg);
            this.reportValidity();
            this.value = this.oldValue;
            this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
          } else {
            // Rejected value - nothing to restore
            this.value = "";
          }
        });
      };
      // Install input filters.
      $("#publication_date_collection__min").inputFilter(function(value) {
        return /^\d*$/.test(value); }, "Must be an positive integer");
      $("#publication_date_collection__max").inputFilter(function(value) {
        return /^\d*$/.test(value); }, "Must be an positive integer");
    }
  };
})(jQuery);
